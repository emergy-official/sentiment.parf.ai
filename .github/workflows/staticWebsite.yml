# Define the name of the GitHub Action
name: Continuous Integration

# Define the events that will trigger the action
on:
  push:
    branches:
      - dev
      - prod

# Define environment variables
env:
  AWS_REGION: us-east-1
  ASSUME_ROLE_ARN_DEV: arn:aws:iam::267341338450:role/github-dev--sentiment
  ASSUME_ROLE_ARN_PROD: arn:aws:iam::258317103062:role/github-prod--sentiment
  WEBSITE_FOLDER: website
  LAMBDA_FUNCTION: sentiment_api

# Define permissions required for the action
permissions:
  id-token: write # Required for requesting the JWT
  contents: read # Required for actions/checkout

# Define the jobs to be executed in the action
jobs:
  continuous-integrations:
    # Define the operating system the action will run on
    runs-on: ubuntu-latest

    # Prevent a publish loop with auto and GitHub Actions.
    if: "contains(github.event.head_commit.message, 'deploy:sentiment')"

    # Define the list of steps that the action will go through
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::818028758633:role/github_actions_role
          aws-region: ${{ env.AWS_REGION }}

      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Deploy to s3
        run: |
          echo "Assume the proper AWS Account from the one already assumed"
          eval $(aws sts assume-role --role-arn "${{ env.ASSUME_ROLE_ARN }}" --role-session-name github_session | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\(.AccessKeyId)\nexport AWS_SECRET_ACCESS_KEY=\(.SecretAccessKey)\nexport AWS_SESSION_TOKEN=\(.SessionToken)\n"')
          echo $(aws sts get-caller-identity)
          echo "Building..."
          cd api/sentiment

          echo $(ls)

          echo "Docker build:"
          export IMG_VERSION=latest
          docker logout public.ecr.aws
          docker build --platform linux/amd64 -t python-scikit-learn:$IMG_VERSION .
          

